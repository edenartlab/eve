name: Update Tools

on:
  push:
    branches:
      - staging
      - main
    paths:
      - "eve/tools/**"

jobs:
  update-tools:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v4
        with:
          repository: edenartlab/workflows
          path: workflows

      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          path: eve
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install the latest version of rye
        uses: eifinger/setup-rye@v4

      - name: Install dependencies
        working-directory: eve
        run: rye sync

      - name: Configure Modal token
        working-directory: eve
        run: rye run modal token set --token-id ${{ secrets.MODAL_TOKEN_ID }} --token-secret ${{ secrets.MODAL_TOKEN_SECRET }}

      - name: Set environment variable
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "DB=PROD" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "DB=STAGE" >> $GITHUB_ENV
          fi

      - name: Detect changed tools
        id: changed-tools
        working-directory: eve
        run: |
          # Get the list of changed files in tools directory
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^eve/tools/' | grep -v __pycache__ || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No tools changed"
            echo "tools=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Extract unique tool names (folder names)
          TOOLS=""
          for file in $CHANGED_FILES; do
            # Remove the eve/tools/ prefix
            tool_path=${file#eve/tools/}
            
            # Get the first directory segment as the tool name
            tool_name=$(echo "$tool_path" | cut -d'/' -f1)
            
            # Skip system directories and files
            if [[ "$tool_name" != "__pycache__" && "$tool_name" != "legacy" && "$tool_name" != "" ]]; then
              TOOLS="$TOOLS $tool_name"
            fi
          done

          # Remove duplicates and trim whitespace
          UNIQUE_TOOLS=$(echo "$TOOLS" | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/[[:space:]]*$//')

          echo "Detected tools: $UNIQUE_TOOLS"
          echo "tools=$UNIQUE_TOOLS" >> $GITHUB_OUTPUT

      - name: Update tools
        if: steps.changed-tools.outputs.tools != ''
        working-directory: eve
        env:
          DB: ${{ env.DB }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          EDEN_API_KEY: ${{ secrets.EDEN_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
        run: |
          echo "Updating tools in $DB environment..."

          for tool in ${{ steps.changed-tools.outputs.tools }}; do
            echo "Updating tool: $tool"
            rye run eve tool update "$tool" || echo "Failed to update $tool, continuing..."
          done
